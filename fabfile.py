from io import StringIO
from fabric.api import *  # noqa
from fabric.contrib.console import confirm

tool_name = 'wikibugs'

env.hosts = ['tools-login.wmflabs.org']
env.sudo_user = 'tools.{}'.format(tool_name)
env.sudo_prefix = 'sudo -ni '
env.use_ssh_config = True

home_dir = '/data/project/{}'.format(tool_name)
code_dir = '{}/wikibugs2'.format(home_dir)
python = '{}/py-wikibugs2/bin/python'.format(home_dir)

jobs = {
    'wb2-phab': '{python} {code_dir}/wikibugs.py --logfile {home_dir}/wikibugs.log',
    'wb2-irc': '{python} {code_dir}/redis2irc.py --logfile {home_dir}/redis2irc.log',
    'wb2-grrrrit': '{python} {code_dir}/grrrrit.py --logfile {home_dir}/grrrrit.log',
}

jsub = '/usr/bin/jsub'
jsub_params = '-l release=trusty '\
              '-mem 1G ' \
              '-once ' \
              '-v PYTHONIOENCODING="utf8:backslashreplace" '


def irclog_deploy(message):
    with cd(code_dir):
        sudo('./log_to_irc.py "{}"'.format(message))


@task
def pull():
    with cd(code_dir):
        sudo('git rev-list HEAD --max-count=1')
        sudo('git reset --hard origin/master')
        sudo('git pull')


@task
def crontab():
    with cd(home_dir):
        contents = StringIO(u"""# This crontab was auto-generated by Fabric
#m   h   dom mon dow cmd
 0   0   *   *   0   {jsub} -N taxonomy {jsub_params} {python} {code_dir}/taxonomy.py > /dev/null
""".format(**globals())
        )
        put(contents, 'crontab', mode=0o664)
        sudo('crontab crontab')


def start_job(name):
    # string formatting as fab doesn't get list-style commands...
    sudo('{jsub} -N {name} {jsub_params} -continuous {command}'.format(
        jsub=jsub,
        jsub_params=jsub_params,
        name=name,
        command=jobs[name].format(**globals())
    ))


def restart_job(name):
    sudo('qmod -rj {name}'.format(name=name))


@task
def start_jobs():
    with settings(warn_only=True):
        for job in jobs:
            start_job(job)


@task
def deploy(*args):
    if len(args) == 0:
        alljobs = list(jobs.keys())
        if not confirm("No jobs provided, assuming {}. OK?".format(', '.join(alljobs)), default=False):
            abort('No jobs provided. Usage: fab deploy:[job]')
            return
        args = alljobs
    pull()
    for job in args:
        restart_job(job)
    irclog_deploy(', '.join(args))


@task
def grab_config():
    with cd(code_dir):
        get('config.json', '.')


def listify(users):
    return "\n".join("- " + u for u in sorted(users, key=str.lower))


@task
def update_contributors():
    all_git_authors = set(x.strip() for x in local('git log --format=%an', capture=True).split("\n"))

    maintainers = {"Kunal Mehta", "YuviPanda", "Merlijn van Deen"}
    duplicates = {"Legoktm", "Adam Wight", "Florian", "jenkins-bot", "quiddity-wp"}

    contributors = (all_git_authors - maintainers - duplicates)
    marked_maintainers = {m + " (maintainer)" for m in maintainers}

    with open('CREDITS', 'w') as f:
        f.write("We would like to thank all of our contributors for helping improve wikibugs!\n")
        f.write("\n")
        f.write(listify(contributors | marked_maintainers))
        f.write("\n")
